        -:    0:Source:test_environment.c
        -:    0:Graph:test_environment.gcno
        -:    0:Data:test_environment.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:// Ambiente de testes.
        -:    2:
        -:    3:/**
        -:    4:
        -:    5:  \file
        -:    6:  \brief Arquivo que testa a função para converter números romanos
        -:    7:  em número inteiros.
        -:    8:
        -:    9:*/
        -:   10:
        -:   11:#include "roman_number_conversion.h"
        -:   12:#include "gtest/gtest.h"
        -:   13:
        -:   14:char name[50];
        -:   15:
        -:   16:/** Teste para argumentos com mais de 30 caracteres. */
        -:   17:
        5:   18:TEST (RomanNumberConversion, Invalid_Length) {
        -:   19:
        1:   20:    strcpy(name, "IIIIIIIIIIAIIIIIIIIIIAIIIIIIIIIIIIA");
        -:   21:
        1:   22:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:   23:
        1:   24:}
        -:   25:
        -:   26:/** Teste para argumentos com caracteres inválidos. */
        -:   27:
        5:   28:TEST (RomanNumberConversion, Invalid_Character) {
        -:   29:
        1:   30:    strcpy(name, "A");
        -:   31:
        1:   32:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:   33:
        1:   34:}
        -:   35:
        -:   36:/** Teste do número 01. */
        -:   37:
        5:   38:TEST (RomanNumberConversion, 01) {
        -:   39:
        1:   40:    strcpy(name, "I");
        -:   41:
        1:   42:    EXPECT_EQ ((RomanNumberConversion(name) == 1), 1);
        -:   43:
        1:   44:}
        -:   45:
        -:   46:/** Teste do número 02. */
        -:   47:
        5:   48:TEST (RomanNumberConversion, 02) {
        -:   49:
        1:   50:    strcpy(name, "II");
        -:   51:
        1:   52:    EXPECT_EQ ((RomanNumberConversion(name) == 2), 1);
        -:   53:
        1:   54:}
        -:   55:
        -:   56:/** Teste do número 03. */
        -:   57:
        5:   58:TEST (RomanNumberConversion, 03) {
        -:   59:
        1:   60:    strcpy(name, "III");
        -:   61:
        1:   62:    EXPECT_EQ ((RomanNumberConversion(name) == 3), 1);
        -:   63:
        1:   64:}
        -:   65:
        -:   66:/** Teste para argumentos com 4 caracteres repetidos e sequenciais. */
        -:   67:
        5:   68:TEST (RomanNumberConversion, Four_Repetitions) {
        -:   69:
        1:   70:    strcpy(name, "IIII");
        -:   71:
        1:   72:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:   73:
        1:   74:}
        -:   75:
        -:   76:/** Teste do número 04. */
        -:   77:
        5:   78:TEST (RomanNumberConversion, 04) {
        -:   79:
        1:   80:    strcpy(name, "IV");
        -:   81:
        1:   82:    EXPECT_EQ ((RomanNumberConversion(name) == 4), 1);
        -:   83:
        1:   84:}
        -:   85:
        -:   86:/** Teste do número 05. */
        -:   87:
        5:   88:TEST (RomanNumberConversion, 05) {
        -:   89:
        1:   90:    strcpy(name, "V");
        -:   91:
        1:   92:    EXPECT_EQ ((RomanNumberConversion(name) == 5), 1);
        -:   93:
        1:   94:}
        -:   95:
        -:   96:/** Teste do número 08. */
        -:   97:
        5:   98:TEST (RomanNumberConversion, 08) {
        -:   99:
        1:  100:    strcpy(name, "VIII");
        -:  101:
        1:  102:    EXPECT_EQ ((RomanNumberConversion(name) == 8), 1);
        -:  103:
        1:  104:}
        -:  105:
        -:  106:/** Testes para argumentos com caracteres antes de um caracter de valor maior. */
        -:  107:
        5:  108:TEST (RomanNumberConversion, Two_Characters_Before_A_Bigger_Character) {
        -:  109:
        1:  110:    strcpy(name, "IIV");
        -:  111:
        1:  112:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  113:
        1:  114:}
        -:  115:
        5:  116:TEST (RomanNumberConversion, Three_Characters_Before_A_Bigger_Character) {
        -:  117:
        1:  118:    strcpy(name, "IIIV");
        -:  119:
        1:  120:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  121:
        1:  122:}
        -:  123:
        -:  124:/** Teste para argumentos com uma repetição de caracter inválida. */
        -:  125:
        5:  126:TEST (RomanNumberConversion, Invalid_Repetition) {
        -:  127:
        1:  128:    strcpy(name, "VV");
        -:  129:
        1:  130:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  131:
        1:  132:}
        -:  133:
        -:  134:/** Teste do número 09. */
        -:  135:
        5:  136:TEST (RomanNumberConversion, 09) {
        -:  137:
        1:  138:    strcpy(name, "IX");
        -:  139:
        1:  140:    EXPECT_EQ ((RomanNumberConversion(name) == 9), 1);
        -:  141:
        1:  142:}
        -:  143:
        -:  144:/** Teste do número 14. */
        -:  145:
        5:  146:TEST (RomanNumberConversion, 14) {
        -:  147:
        1:  148:    strcpy(name, "XIV");
        -:  149:
        1:  150:    EXPECT_EQ ((RomanNumberConversion(name) == 14), 1);
        -:  151:
        1:  152:}
        -:  153:
        -:  154:/** Teste do número 18. */
        -:  155:
        5:  156:TEST (RomanNumberConversion, 18) {
        -:  157:
        1:  158:    strcpy(name, "XVIII");
        -:  159:
        1:  160:    EXPECT_EQ ((RomanNumberConversion(name) == 18), 1);
        -:  161:
        1:  162:}
        -:  163:
        -:  164:/** Teste do número 19. */
        -:  165:
        5:  166:TEST (RomanNumberConversion, 19) {
        -:  167:
        1:  168:    strcpy(name, "XIX");
        -:  169:
        1:  170:    EXPECT_EQ ((RomanNumberConversion(name) == 19), 1);
        -:  171:
        1:  172:}
        -:  173:
        -:  174:/** Teste para argumentos com precedência inválida. */
        -:  175:
        5:  176:TEST (RomanNumberConversion, Invalid_Character_Precedence) {
        -:  177:
        1:  178:    strcpy(name, "VX");
        -:  179:
        1:  180:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  181:
        1:  182:}
        -:  183:
        -:  184:/** Teste para argumentos com precedência inválida antes de uma subtração. */
        -:  185:
        5:  186:TEST (RomanNumberConversion, Invalid_Precedence_Before_Subtraction) {
        -:  187:
        1:  188:    strcpy(name, "VIX");
        -:  189:
        1:  190:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  191:
        1:  192:}
        -:  193:
        -:  194:/** Teste para argumentos com repetição inválida após um caracter. */
        -:  195:
        5:  196:TEST (RomanNumberConversion, Invalid_Repetition_After_Character) {
        -:  197:
        1:  198:    strcpy(name, "VIV");
        -:  199:
        1:  200:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  201:
        1:  202:}
        -:  203:
        -:  204:/** Teste do número 24. */
        -:  205:
        5:  206:TEST (RomanNumberConversion, 24) {
        -:  207:
        1:  208:    strcpy(name, "XXIV");
        -:  209:
        1:  210:    EXPECT_EQ ((RomanNumberConversion(name) == 24), 1);
        -:  211:
        1:  212:}
        -:  213:
        -:  214:/** Teste do número 29. */
        -:  215:
        5:  216:TEST (RomanNumberConversion, 29) {
        -:  217:
        1:  218:    strcpy(name, "XXIX");
        -:  219:
        1:  220:    EXPECT_EQ ((RomanNumberConversion(name) == 29), 1);
        -:  221:
        1:  222:}
        -:  223:
        -:  224:/** Teste para argumentos com precedência inválida após uma subtração. */
        -:  225:
        5:  226:TEST (RomanNumberConversion, Invalid_Precedence_After_Subtraction) {
        -:  227:
        1:  228:    strcpy(name, "XXIXX");
        -:  229:
        1:  230:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  231:
        1:  232:}
        -:  233:
        -:  234:/** Teste do número 38. */
        -:  235:
        5:  236:TEST (RomanNumberConversion, 38) {
        -:  237:
        1:  238:    strcpy(name, "XXXVIII");
        -:  239:
        1:  240:    EXPECT_EQ ((RomanNumberConversion(name) == 38), 1);
        -:  241:
        1:  242:}
        -:  243:
        -:  244:/** Teste do número 40. */
        -:  245:
        5:  246:TEST (RomanNumberConversion, 40) {
        -:  247:
        1:  248:    strcpy(name, "XL");
        -:  249:
        1:  250:    EXPECT_EQ ((RomanNumberConversion(name) == 40), 1);
        -:  251:
        1:  252:}
        -:  253:
        -:  254:/** Teste do número 44. */
        -:  255:
        5:  256:TEST (RomanNumberConversion, 44) {
        -:  257:
        1:  258:    strcpy(name, "XLIV");
        -:  259:
        1:  260:    EXPECT_EQ ((RomanNumberConversion(name) == 44), 1);
        -:  261:
        1:  262:}
        -:  263:
        -:  264:/** Teste do número 48. */
        -:  265:
        5:  266:TEST (RomanNumberConversion, 48) {
        -:  267:
        1:  268:    strcpy(name, "XLVIII");
        -:  269:
        1:  270:    EXPECT_EQ ((RomanNumberConversion(name) == 48), 1);
        -:  271:
        1:  272:}
        -:  273:
        -:  274:/** Teste do número 49. */
        -:  275:
        5:  276:TEST (RomanNumberConversion, 49) {
        -:  277:
        1:  278:    strcpy(name, "XLIX");
        -:  279:
        1:  280:    EXPECT_EQ ((RomanNumberConversion(name) == 49), 1);
        -:  281:
        1:  282:}
        -:  283:
        -:  284:/** Teste para argumentos que tentam adicionar caracteres subtraídos. */
        -:  285:
        5:  286:TEST (RomanNumberConversion, Invalid_Precedence_Due_To_Subtraction) {
        -:  287:
        1:  288:    strcpy(name, "XLX");
        -:  289:
        1:  290:    EXPECT_EQ ((RomanNumberConversion(name) == -1), 1);
        -:  291:
        1:  292:}
        -:  293:
        -:  294:/** Teste do número 58. */
        -:  295:
        5:  296:TEST (RomanNumberConversion, 58) {
        -:  297:
        1:  298:    strcpy(name, "LVIII");
        -:  299:
        1:  300:    EXPECT_EQ ((RomanNumberConversion(name) == 58), 1);
        -:  301:
        1:  302:}
        -:  303:
        -:  304:/** Teste do número 69. */
        -:  305:
        5:  306:TEST (RomanNumberConversion, 69) {
        -:  307:
        1:  308:    strcpy(name, "LXIX");
        -:  309:
        1:  310:    EXPECT_EQ ((RomanNumberConversion(name) == 69), 1);
        -:  311:
        1:  312:}
        -:  313:
        -:  314:/** Teste do número 88. */
        -:  315:
        5:  316:TEST (RomanNumberConversion, 88) {
        -:  317:
        1:  318:    strcpy(name, "LXXXVIII");
        -:  319:
        1:  320:    EXPECT_EQ ((RomanNumberConversion(name) == 88), 1);
        -:  321:
        1:  322:}
        -:  323:
        -:  324:/** Teste do número 90. */
        -:  325:
        5:  326:TEST (RomanNumberConversion, 90) {
        -:  327:
        1:  328:    strcpy(name, "XC");
        -:  329:
        1:  330:    EXPECT_EQ ((RomanNumberConversion(name) == 90), 1);
        -:  331:
        1:  332:}
        -:  333:
        -:  334:/** Teste do número 99. */
        -:  335:
        5:  336:TEST (RomanNumberConversion, 99) {
        -:  337:
        1:  338:    strcpy(name, "XCIX");
        -:  339:
        1:  340:    EXPECT_EQ ((RomanNumberConversion(name) == 99), 1);
        -:  341:
        1:  342:}
        -:  343:
        -:  344:/** Teste do número 111. */
        -:  345:
        5:  346:TEST (RomanNumberConversion, 111) {
        -:  347:
        1:  348:    strcpy(name, "CXI");
        -:  349:
        1:  350:    EXPECT_EQ ((RomanNumberConversion(name) == 111), 1);
        -:  351:
        1:  352:}
        -:  353:
        -:  354:/** Teste do número 203. */
        -:  355:
        5:  356:TEST (RomanNumberConversion, 203) {
        -:  357:
        1:  358:    strcpy(name, "CCIII");
        -:  359:
        1:  360:    EXPECT_EQ ((RomanNumberConversion(name) == 203), 1);
        -:  361:
        1:  362:}
        -:  363:
        -:  364:/** Teste do número 247. */
        -:  365:
        5:  366:TEST (RomanNumberConversion, 247) {
        -:  367:
        1:  368:    strcpy(name, "CCXLVII");
        -:  369:
        1:  370:    EXPECT_EQ ((RomanNumberConversion(name) == 247), 1);
        -:  371:
        1:  372:}
        -:  373:
        -:  374:/** Teste do número 338. */
        -:  375:
        5:  376:TEST (RomanNumberConversion, 338) {
        -:  377:
        1:  378:    strcpy(name, "CCCXXXVIII");
        -:  379:
        1:  380:    EXPECT_EQ ((RomanNumberConversion(name) == 338), 1);
        -:  381:
        1:  382:}
        -:  383:
        -:  384:/** Teste para argumentos com letras maiúsculas e minúsculas. */
        -:  385:
        5:  386:TEST (RomanNumberConversion, Mixed_Case_Letters) {
        -:  387:
        1:  388:    strcpy(name, "cCCxXxVIIi");
        -:  389:
        1:  390:    EXPECT_EQ ((RomanNumberConversion(name) == 338), 1);
        -:  391:
        1:  392:}
        -:  393:
        -:  394:/** Teste do número 400. */
        -:  395:
        5:  396:TEST (RomanNumberConversion, 400) {
        -:  397:
        1:  398:    strcpy(name, "CD");
        -:  399:
        1:  400:    EXPECT_EQ ((RomanNumberConversion(name) == 400), 1);
        -:  401:
        1:  402:}
        -:  403:
        -:  404:/** Teste do número 499. */
        -:  405:
        5:  406:TEST (RomanNumberConversion, 499) {
        -:  407:
        1:  408:    strcpy(name, "CDXCIX");
        -:  409:
        1:  410:    EXPECT_EQ ((RomanNumberConversion(name) == 499), 1);
        -:  411:
        1:  412:}
        -:  413:
        -:  414:/** Teste do número 550. */
        -:  415:
        5:  416:TEST (RomanNumberConversion, 550) {
        -:  417:
        1:  418:    strcpy(name, "DL");
        -:  419:
        1:  420:    EXPECT_EQ ((RomanNumberConversion(name) == 550), 1);
        -:  421:
        1:  422:}
        -:  423:
        -:  424:/** Teste do número 695. */
        -:  425:
        5:  426:TEST (RomanNumberConversion, 695) {
        -:  427:
        1:  428:    strcpy(name, "DCXCV");
        -:  429:
        1:  430:    EXPECT_EQ ((RomanNumberConversion(name) == 695), 1);
        -:  431:
        1:  432:}
        -:  433:
        -:  434:/** Teste do número 713. */
        -:  435:
        5:  436:TEST (RomanNumberConversion, 713) {
        -:  437:
        1:  438:    strcpy(name, "DCCXIII");
        -:  439:
        1:  440:    EXPECT_EQ ((RomanNumberConversion(name) == 713), 1);
        -:  441:
        1:  442:}
        -:  443:
        -:  444:/** Teste do número 888. */
        -:  445:
        5:  446:TEST (RomanNumberConversion, 888) {
        -:  447:
        1:  448:    strcpy(name, "DCCCLXXXVIII");
        -:  449:
        1:  450:    EXPECT_EQ ((RomanNumberConversion(name) == 888), 1);
        -:  451:
        1:  452:}
        -:  453:
        -:  454:/** Teste do número 900. */
        -:  455:
        5:  456:TEST (RomanNumberConversion, 900) {
        -:  457:
        1:  458:    strcpy(name, "CM");
        -:  459:
        1:  460:    EXPECT_EQ ((RomanNumberConversion(name) == 900), 1);
        -:  461:
        1:  462:}
        -:  463:
        -:  464:/** Teste do número 999. */
        -:  465:
        5:  466:TEST (RomanNumberConversion, 999) {
        -:  467:
        1:  468:    strcpy(name, "CMXCIX");
        -:  469:
        1:  470:    EXPECT_EQ ((RomanNumberConversion(name) == 999), 1);
        -:  471:
        1:  472:}
        -:  473:
        -:  474:/** Teste do número 1047. */
        -:  475:
        5:  476:TEST (RomanNumberConversion, 1047) {
        -:  477:
        1:  478:    strcpy(name, "MXLVII");
        -:  479:
        1:  480:    EXPECT_EQ ((RomanNumberConversion(name) == 1047), 1);
        -:  481:
        1:  482:}
        -:  483:
        -:  484:/** Teste do número 1941. */
        -:  485:
        5:  486:TEST (RomanNumberConversion, 1941) {
        -:  487:
        1:  488:    strcpy(name, "MCMXLI");
        -:  489:
        1:  490:    EXPECT_EQ ((RomanNumberConversion(name) == 1941), 1);
        -:  491:
        1:  492:}
        -:  493:
        -:  494:/** Teste do número 2889. */
        -:  495:
        5:  496:TEST (RomanNumberConversion, 2889) {
        -:  497:
        1:  498:    strcpy(name, "MMDCCCLXXXIX");
        -:  499:
        1:  500:    EXPECT_EQ ((RomanNumberConversion(name) == 2889), 1);
        -:  501:
        1:  502:}
        -:  503:
        -:  504:/** Teste do número 3000. */
        -:  505:
        5:  506:TEST (RomanNumberConversion, 3000) {
        -:  507:
        1:  508:    strcpy(name, "MMM");
        -:  509:
        1:  510:    EXPECT_EQ ((RomanNumberConversion(name) == 3000), 1);
        -:  511:
        1:  512:}
        -:  513:
        1:  514:int main(int argc, char **argv) {
        -:  515:
        1:  516:::testing::InitGoogleTest(&argc, argv);
        1:  517:return RUN_ALL_TESTS();
        -:  518:
        3:  519:}
